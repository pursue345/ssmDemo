<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
       http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context-4.0.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/task
       http://www.springframework.org/schema/task/spring-task-3.0.xsd">

    <!-- 引入数据库配置文件db.properties，配合Spring整合mybatis -->
    <context:property-placeholder location="classpath:db.properties"  />
    <!--引入annotation-config,支持bean注解-->
    <context:annotation-config/>

    <!--Spring定时任务注解开关-->
    <task:annotation-driven />

    <!-- 1.扫描三层包 -->
    <context:component-scan base-package="com.ssm">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!--使用spring自带的占位符替换功能 -->
    <!--<quartzBean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        &lt;!&ndash; 忽略没有找到的资源文件 &ndash;&gt;
        <property name="ignoreResourceNotFound" value="false" />
        &lt;!&ndash; 配置资源文件 &ndash;&gt;
        <property name="locations">
            <list>
                <value>classpath:db.properties</value>
            </list>
        </property>
    </quartzBean>-->

    <!-- 2.druid数据库连接池 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <!-- 基本属性 url、user、password -->
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="driverClassName" value="${jdbc.driverClassName}" />
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${initialSize}" />
        <property name="minIdle" value="${minIdle}" />
        <property name="maxActive" value="${maxActive}" />
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${maxWait}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="validationQuery" value="SELECT 'x'" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />
        <!-- 连接泄漏处理。Druid提供了RemoveAbandanded相关配置，用来关闭长时间不使用的连接（例如忘记关闭连接）。 -->
        <property name="removeAbandoned" value="true" />
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="1800" />
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true" />
        <!-- 配置监控统计拦截的filters, 监控统计："stat",防SQL注入："wall",组合使用： "stat,wall" -->
        <property name="filters" value="stat" />
    </bean>

    <!-- 2.c3p0数据库连接池 -->
    <!--<quartzBean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        &lt;!&ndash; 配置连接池属性 &ndash;&gt;
        <property name="driverClass" value="${jdbc.driverClassName}" />
        <property name="jdbcUrl" value="${jdbc.url}" />
        <property name="user" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        &lt;!&ndash; c3p0连接池的私有属性 &ndash;&gt;
        <property name="maxPoolSize" value="30" />
        <property name="minPoolSize" value="10" />
        &lt;!&ndash; 关闭连接后不自动commit &ndash;&gt;
        <property name="autoCommitOnClose" value="false" />
        &lt;!&ndash; 获取连接超时时间 &ndash;&gt;
        <property name="checkoutTimeout" value="10000" />
        &lt;!&ndash; 当获取连接失败重试次数 &ndash;&gt;
        <property name="acquireRetryAttempts" value="2" />
    </quartzBean>-->

    <!-- quartz配置 -->
    <!--<task:annotation-driven/>-->

    <!-- spring对quartz的整合所提供的SchedulerFactory -->
    <bean id="scheduleReportFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <!--这里使用的是spring中已经配置好的数据源；当然如果不配置则使用quartz.properties中的数据库配置。-->
        <property name="dataSource">
            <ref bean="dataSource"/>
        </property>
        <property name="startupDelay" value="100"/>
        <property name="applicationContextSchedulerContextKey" value="applicationContextKey"/>
        <property name="configLocation" value="classpath:quartz.properties"/>
    </bean>

    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--注入数据库连接池-->
        <property name="dataSource" ref="dataSource" />
        <!--配置MyBaties全局配置文件:mybatis-config.xml-->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!--扫描Entity包，给实体层取别名-->
        <property name="typeAliasesPackage" value="com.ssm.Pojo" />
        <!--扫描sql配置文件:mapper需要的xml文件-->
        <property name="mapperLocations" value="classpath:com/ssm/mapper/xml/*.xml" />
    </bean>

    <!-- 4.Mapper扫描：因为Mapper层只有接口，Spring框架会自动给Mapper生成代理，动态实现接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Mapper接口包 -->
        <property name="basePackage" value="com.ssm.mapper" />
    </bean>

    <!-- 5.平台事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- 6.开启注解支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>